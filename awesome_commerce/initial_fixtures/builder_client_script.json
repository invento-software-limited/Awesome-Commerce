[
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-06 05:30:15.800581",
  "name": "CSS-60823",
  "public_url": "/files/page_styles/CSS-60823-da219228aa.css?v=107e1bd9b4",
  "script": "/* Write your CSS here */\n",
  "script_type": "CSS"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-06 07:01:44.260492",
  "name": "CSS-4944b",
  "public_url": "/files/page_styles/CSS-4944b-9d9340ec92.css?v=2368e44e7d",
  "script": "/* Write your CSS here */\n",
  "script_type": "CSS"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-15 09:54:09.019987",
  "name": "CSS-78204",
  "public_url": "/files/page_styles/CSS-78204-7ec1198ea2.css?v=f6f266cb83",
  "script": "/* Write your CSS here */\n",
  "script_type": "CSS"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-09 06:11:09.887455",
  "name": "shop-js",
  "public_url": "/files/page_scripts/JavaScript-992a5-09152953e5.js?v=ec0e7b663a",
  "script": "// Write your script here\n",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-20 07:32:25.335792",
  "name": "register",
  "public_url": "/files/page_scripts/JavaScript-c7d47-9dbf95331c.js?v=18bf6c25af",
  "script": "window.onload = function () {\n  if (page_data.user && page_data.user !== \"Guest\") {\n    const urlParams = new URLSearchParams(window.location.search);\n    const redirectTo = urlParams.get('redirect-to');\n\n    window.location.href = redirectTo || '/profile';\n  }\n   const showPasswordCheckbox = document.getElementById(\"show_password\");\n  const passwordInput = document.getElementById(\"password\");\n  const confirmPasswordInput = document.getElementById(\"confirm_password\");\n\n  if (showPasswordCheckbox && passwordInput && confirmPasswordInput) {\n    showPasswordCheckbox.setAttribute('type', 'checkbox');\n\n    showPasswordCheckbox.addEventListener(\"change\", function () {\n      if (this.checked) {\n        passwordInput.setAttribute('type', 'text');\n        confirmPasswordInput.setAttribute('type', 'text');\n      } else {\n        passwordInput.setAttribute('type', 'password');\n        confirmPasswordInput.setAttribute('type', 'password');\n      }\n    });\n  }\n};\n\ndocument.getElementById('register_form').addEventListener('submit', async function(e) {\n  e.preventDefault(); // Prevent default form submission\n\n  const form = e.target;\n  const formData = new FormData(form);\n  const csrfToken = page_data.csrf_token;\n\n  const password = formData.get('password');\n  const confirmPassword = formData.get('confirm_password');\n\n  // Check if passwords match\n  if (password !== confirmPassword) {\n    Toastify({\n      text: \"❌ Passwords do not match.\",\n      close: true,\n      gravity: \"top\",\n      position: \"center\",\n      stopOnFocus: true,\n      style: {\n        background: \"linear-gradient(to right, #ff5f6d, #ffc371)\",\n      }\n    }).showToast();\n    return;\n  }\n\n  // Convert form data to JSON\n  const data = {};\n  formData.forEach((value, key) => {\n    data[key] = value;\n  });\n\n  try {\n    const response = await fetch('/api/method/awesome_commerce.api.register.register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-frappe-csrf-token': csrfToken,\n      },\n      body: JSON.stringify({ doc: data })\n    });\n\n    const result = await response.json();\n\n    if (response.ok && result.message) {\n      Toastify({\n        text: '🎉 Registration successful!',\n        close: true,\n        gravity: \"top\",\n        position: \"center\",\n        stopOnFocus: true,\n        style: {\n          background: \"linear-gradient(to right, #00b09b, #96c93d)\",\n        }\n      }).showToast();\n      window.location.href = '/profile'\n    } else {\n         if (result._server_messages) {\n              const messages = JSON.parse(result._server_messages);\n              const firstMessage = JSON.parse(messages[0]);\n              const cleanMessage = firstMessage.message.replace(/<[^>]*>/g, ''); \n              errorMessage = `❌ ${cleanMessage}`;\n         \n              Toastify({\n                text: errorMessage,\n                close: true,\n                gravity: \"top\",\n                position: \"center\",\n                stopOnFocus: true,\n                style: {\n                  background: \"linear-gradient(to right, #ff5f6d, #ffc371)\",\n                }\n              }).showToast();\n         }\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    Toastify({\n      text: '⚠️ An error occurred. Please try again.',\n      close: true,\n      gravity: \"top\",\n      position: \"center\",\n      stopOnFocus: true,\n      style: {\n        background: \"linear-gradient(to right, #f857a6, #ff5858)\",\n      }\n    }).showToast();\n  }\n});\n",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-20 06:44:01.687504",
  "name": "login",
  "public_url": "/files/page_scripts/JavaScript-82328-cc74ac0dd4.js?v=992eedbdb6",
  "script": "document.getElementById(\"login_form\").addEventListener(\"submit\", function(e) {\n  e.preventDefault();\n\n  const email = document.querySelector('#login_form input[type=\"text\"]').value;\n  const password = document.querySelector('#login_form input[type=\"password\"]').value;\n\n  fetch('/api/method/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      usr: email,\n      pwd: password\n    })\n  })\n  .then(response => response.json())\n  .then(data => {\n    if (data.full_name) {\n      Toastify({\n        text: `👋 Welcome ${data.full_name}!`,\n        close: true,\n        gravity: \"top\",\n        position: \"center\",\n        stopOnFocus: true,\n        style: {\n          background: \"linear-gradient(to right, #00b09b, #96c93d)\",\n        }\n      }).showToast();\n\n      setTimeout(() => {\n        window.location.href = data.home_page || '/';\n      }, 1200); // small delay to show toast\n    } else {\n      Toastify({\n        text: \"❌ Invalid credentials. Please try again.\",\n        close: true,\n        gravity: \"top\",\n        position: \"center\",\n        stopOnFocus: true,\n        style: {\n          background: \"linear-gradient(to right, #ff5f6d, #ffc371)\",\n        }\n      }).showToast();\n    }\n  })\n  .catch(error => {\n    console.error('Login error:', error);\n    Toastify({\n      text: \"⚠️ An error occurred during login. Please try again later.\",\n      close: true,\n      gravity: \"top\",\n      position: \"center\",\n      stopOnFocus: true,\n      style: {\n        background: \"linear-gradient(to right, #f857a6, #ff5858)\",\n      }\n    }).showToast();\n  });\n});\n\n\nwindow.onload = function () {\n  if (page_data.user && page_data.user !== \"Guest\") {\n    const urlParams = new URLSearchParams(window.location.search);\n    const redirectTo = urlParams.get('redirect-to');\n\n    window.location.href = redirectTo || '/profile';\n  }\n  const showPasswordCheckbox = document.getElementById(\"show_password\");\n  const passwordInput = document.getElementById(\"password\");\n\n  if (showPasswordCheckbox && passwordInput) {\n    showPasswordCheckbox.setAttribute('type', 'checkbox');\n\n    showPasswordCheckbox.addEventListener(\"change\", function () {\n      if (this.checked) {\n        passwordInput.setAttribute('type', 'text');\n      } else {\n        passwordInput.setAttribute('type', 'password');\n      }\n    });\n  }\n};",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-15 07:26:36.326025",
  "name": "tab-css",
  "public_url": "/files/page_styles/CSS-77938-70d2b4718f.css?v=6890db3804",
  "script": "/* Write your CSS here */\n.tab {\n    display: none; \n}\n.tab.active { \n    display: block; \n}\n.tabs { \n    display: flex; \n    justify-content: center; \n    margin-bottom: 20px; \n}\n.tab-button { \n    cursor: pointer; \n    border: none; \n    background: #ddd; \n    border-radius: 10px;\n}\n.tab-button.active { \n    background: #2B3686; \n    color: white; \n}",
  "script_type": "CSS"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-21 10:55:10.404397",
  "name": "checkout",
  "public_url": "/files/page_scripts/JavaScript-0f64d-ceba041d11.js?v=ba59f308b2",
  "script": "// Store the completion status of each tab\nlet isBillingDetailsCompleted = false;\nlet isDeliveryDetailsCompleted = false;\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    let deliverSameInput = document.querySelector('[name=\"deliver_same\"]');\n    if (deliverSameInput) {\n        deliverSameInput.setAttribute('type', 'checkbox');\n        deliverSameInput.checked = true; \n    }\n    \n    let termsInput = document.querySelector('[name=\"terms\"]');\n    if (termsInput) {\n        termsInput.setAttribute('type', 'checkbox');\n        termsInput.setAttribute('required', 'true');\n    }\n    \n    let billingAddressInputs = document.querySelectorAll('[name=\"billing_address\"]');\n    billingAddressInputs.forEach(input => {\n        input.setAttribute('type', 'radio');\n    });\n    \n    let shippingAddressInputs = document.querySelectorAll('[name=\"shipping_address\"]');\n    shippingAddressInputs.forEach(input => {\n        input.setAttribute('type', 'radio');\n    });\n    const showPasswordCheckbox = document.getElementById(\"show_password\");\n      const passwordInput = document.getElementById(\"password\");\n      const confirmPasswordInput = document.getElementById(\"confirm_password\");\n    \n      if (showPasswordCheckbox && passwordInput && confirmPasswordInput) {\n        showPasswordCheckbox.setAttribute('type', 'checkbox');\n    \n        showPasswordCheckbox.addEventListener(\"change\", function () {\n          if (this.checked) {\n            passwordInput.setAttribute('type', 'text');\n            confirmPasswordInput.setAttribute('type', 'text');\n          } else {\n            passwordInput.setAttribute('type', 'password');\n            confirmPasswordInput.setAttribute('type', 'password');\n          }\n        });\n      }\n    \n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    checkBillingDetails(false);\n    deliverSame(true);\n});\n\nfunction checkBillingDetails(validate = true) {\n    let firstName = document.querySelector('[name=\"first_name\"]');\n    let lastName = document.querySelector('[name=\"last_name\"]');\n    let email = document.querySelector('[name=\"email_id\"]');\n    let password = document.querySelector('[name=\"password\"]');\n    let confirmPassword = document.querySelector('[name=\"confirm_password\"]');\n    let telephone = document.querySelector('[name=\"phone\"]');\n    let addressLine1 = document.querySelector('[name=\"address_line1\"]');\n    let addressLine2 = document.querySelector('[name=\"address_line2\"]');\n    let town = document.querySelector('[name=\"city\"]');\n    let country = document.querySelector('[name=\"country\"]');\n    let postcode = document.querySelector('[name=\"pincode\"]');\n    let state = document.querySelector('[name=\"state\"]');\n    let isLoggedIn = document.querySelector('[name=\"user_logged_in\"]');\n    let attributeValue = isLoggedIn ? isLoggedIn.getAttribute('value') : null;\n\n    resetRedBorders();\n\n    if (attributeValue) {\n        // User is logged in, make fields readonly\n        let fieldsToDisable = [\n            firstName, lastName, email, password, confirmPassword,\n            telephone, addressLine1, addressLine2, town, country,\n            postcode, state\n        ];\n        fieldsToDisable.forEach(field => {\n            if (field) field.readOnly = true;\n        });\n\n        // Instead of validating address fields, check if billing_address radio is selected\n        const selectedBilling = document.querySelector('[name=\"billing_address\"]:checked');\n\n        if (!selectedBilling) {\n            if (validate) {\n                Toastify({\n                    text: \"Please select a billing address.\",\n                    close: true,\n                    gravity: \"top\",\n                    position: \"center\",\n                    stopOnFocus: true,\n                    style: {\n                        background: \"linear-gradient(to right, #ff416c, #ff4b2b)\",\n                    }\n                }).showToast();\n            };\n            isBillingDetailsCompleted = false;\n            return;\n        }\n\n        isBillingDetailsCompleted = true;\n        showTab(1);\n        return;\n    }\n\n    // User is not logged in: validate all form fields as usual\n    if (\n        firstName.value && email.value &&\n        (password.value && confirmPassword.value) &&\n        telephone.value && town.value && postcode.value &&\n        addressLine1.value\n    ) {\n        if (password.value !== confirmPassword.value) {\n            password.style.border = \"1px solid red\";\n            confirmPassword.style.border = \"1px solid red\";\n    \n            Toastify({\n                text: \"Passwords do not match\",\n                close: true,\n                gravity: \"top\",\n                position: \"center\",\n                stopOnFocus: true,\n                style: {\n                    background: \"linear-gradient(to right, #ff416c, #ff4b2b)\",\n                }\n            }).showToast();\n            isBillingDetailsCompleted = false;\n            return;\n        }\n        isBillingDetailsCompleted = true;\n        document.getElementById('tab-1').classList.remove('disabled');\n        let deliverSameCheckbox = document.querySelector('[name=\"deliver_same\"]');\n\n        const preview = document.getElementById(\"address_preview\");\n        if (preview) {\n            preview.querySelector(\".address_line1\").innerHTML = addressLine1.value || '';\n            preview.querySelector(\".city\").innerHTML = town.value || '';\n            preview.querySelector(\".country\").innerHTML = country.value || '';\n            preview.querySelector(\".pincode\").innerHTML = postcode.value || '';\n            preview.querySelector(\".phone\").innerHTML = telephone.value || '';\n        }\n\n        if (deliverSameCheckbox.checked) {\n            deliverSame(true);\n            const shippingPreview = document.getElementById(\"shipping_address_preview\");\n            if (shippingPreview) {\n                shippingPreview.querySelector(\".address_line1\").innerHTML = addressLine1.value || '';\n                shippingPreview.querySelector(\".city\").innerHTML = town.value || '';\n                shippingPreview.querySelector(\".country\").innerHTML = country.value || '';\n                shippingPreview.querySelector(\".pincode\").innerHTML = postcode.value || '';\n                shippingPreview.querySelector(\".phone\").innerHTML = telephone.value || '';\n            }\n            showTab(2);\n        } else {\n            showTab(1);\n        }\n\n    } else {\n        isBillingDetailsCompleted = false;\n        if (validate) {\n            applyRedBorders([\n                firstName, lastName, email, password, confirmPassword,\n                telephone, town, postcode, addressLine1\n            ]);\n        }\n    }\n}\n\n\nfunction checkDeliveryDetails() {\n    let deliverAddressLine1 = document.querySelector('[name=\"deliver_address_line_1\"]');\n    let deliverTown = document.querySelector('[name=\"deliver_town\"]');\n    let deliverPostcode = document.querySelector('[name=\"deliver_postcode\"]');\n    let deliverCountry = document.querySelector('[name=\"deliver_country\"]');\n    let isLoggedIn = document.querySelector('[name=\"user_logged_in\"]');\n    let attributeValue = isLoggedIn ? isLoggedIn.getAttribute('value') : null;\n    let telephone = document.querySelector('[name=\"phone\"]');\n\n    resetRedBorders();\n\n    if (attributeValue) {\n        const selectedShipping = document.querySelector('[name=\"shipping_address\"]:checked');\n\n        if (!selectedShipping) {\n            Toastify({\n                text: \"Please select a shipping address.\",\n                close: true,\n                gravity: \"top\",\n                position: \"center\",\n                stopOnFocus: true,\n                style: {\n                    background: \"linear-gradient(to right, #ff416c, #ff4b2b)\",\n                }\n            }).showToast();\n            isDeliveryDetailsCompleted = false;\n            return;\n        }\n\n        isDeliveryDetailsCompleted = true;\n        showTab(2);\n        return;\n    }\n    else{\n        const shippingPreview = document.getElementById(\"shipping_address_preview\");\n        if (shippingPreview) {\n            shippingPreview.querySelector(\".address_line1\").innerHTML = deliverAddressLine1.value || '';\n            shippingPreview.querySelector(\".city\").innerHTML = deliverTown.value || '';\n            shippingPreview.querySelector(\".country\").innerHTML = deliverCountry.value || '';\n            shippingPreview.querySelector(\".pincode\").innerHTML = deliverPostcode.value || '';\n            shippingPreview.querySelector(\".phone\").innerHTML = telephone.value || '';\n        }\n    }\n\n    if (deliverAddressLine1.value && deliverTown.value && deliverPostcode.value) {\n        isDeliveryDetailsCompleted = true;\n        document.getElementById('tab-2').classList.remove('disabled');\n        showTab(2);\n    } else {\n        isDeliveryDetailsCompleted = false;\n        applyRedBorders([deliverAddressLine1, deliverTown, deliverPostcode]);\n    }\n}\n\n\n\n// Function to apply red borders to empty fields\nfunction applyRedBorders(fields) {\n    fields.forEach(field => {\n        if (!field.value) {\n            field.style.border = \"1px solid red\";\n        }\n    });\n}\n\n\nfunction resetRedBorders() {\n    let allFields = document.querySelectorAll('input, textarea, select');\n    allFields.forEach(field => {\n        field.style.border = \"\"; // Reset any red border\n    });\n}\n\n// Lock navigation to the next tab\nfunction nextTab(tabIndex) {\n    let deliverSameCheckbox = document.querySelector('[name=\"deliver_same\"]');\n\n    switch (tabIndex) {\n        case 1:\n            checkBillingDetails()\n            if (isBillingDetailsCompleted) {\n                if (deliverSameCheckbox.checked) {\n                    showTab(2);\n                } else {\n                    showTab(1);\n                }\n            }\n            break;\n        case 2:\n            checkDeliveryDetails();\n            if (isDeliveryDetailsCompleted) {\n                showTab(2);\n            }\n            break;\n        default:\n            showTab(tabIndex);\n    }\n}\n\n\nfunction removeRedBorderOnInput() {\n    this.style.border = \"\"; \n}\n\n// Show the appropriate tab\nfunction showTab(tabIndex) {\n    let tabs = document.querySelectorAll('.tab');\n    tabs.forEach(tab => tab.classList.remove('active'));\n    document.getElementById(`tab-${tabIndex}`).classList.add('active');\n    document.querySelectorAll('.tab-button').forEach((button, i) => {\n        button.classList.toggle('active', i === tabIndex);\n    });\n}\n\ndocument.querySelector('[name=\"deliver_same\"]').addEventListener('change', function(event) {\n    deliverSame(event.target.checked);\n});\n\nfunction deliverSame(checked){\n    let isLoggedIn = document.querySelector('[name=\"user_logged_in\"]');\n    let attributeValue = isLoggedIn ? isLoggedIn.getAttribute('value') : null;\n    if(!attributeValue){\n        if (checked) {\n            document.querySelector('[name=\"deliver_address_line_1\"]').value = document.querySelector('[name=\"address_line1\"]').value;\n            document.querySelector('[name=\"deliver_address_line_2\"]').value = document.querySelector('[name=\"address_line2\"]').value;\n            document.querySelector('[name=\"deliver_town\"]').value = document.querySelector('[name=\"city\"]').value;\n            document.querySelector('[name=\"deliver_country\"]').value = document.querySelector('[name=\"country\"]').value;\n            document.querySelector('[name=\"deliver_postcode\"]').value = document.querySelector('[name=\"pincode\"]').value;\n            document.querySelector('[name=\"deliver_state\"]').value = document.querySelector('[name=\"state\"]').value;\n        } else {\n            // If the checkbox is unchecked, clear the Delivery Address fields\n            document.querySelector('[name=\"deliver_address_line_1\"]').value = '';\n            document.querySelector('[name=\"deliver_address_line_2\"]').value = '';\n            document.querySelector('[name=\"deliver_town\"]').value = '';\n            document.querySelector('[name=\"deliver_country\"]').value = '';\n            document.querySelector('[name=\"deliver_postcode\"]').value = '';\n            document.querySelector('[name=\"deliver_state\"]').value = '';\n        }\n    }\n}\n\ndocument.querySelectorAll('.tab-button').forEach((button, index) => {\n    if (index > 0) {\n        button.setAttribute('disabled', 'true');\n    }\n});\n\n\ndocument.querySelectorAll('input, textarea, select').forEach(field => {\n    field.addEventListener('input', removeRedBorderOnInput);\n});\n\nfunction prevTab(index) {\n    showTab(index);\n}\n\n\nfunction updateAddressPreview(addressType, addressName) {\n  fetch(`/api/resource/Address/${addressName}`)\n    .then(res => res.json())\n    .then(({ data }) => {\n      if (!data) return;\n       \n      const preview = document.getElementById(\n        addressType === \"billing\" ? \"address_preview\" : \"shipping_address_preview\"\n      );\n\n      if (preview) {\n        preview.querySelector(\".address_line1\").innerHTML = data.address_line1 || '';\n        preview.querySelector(\".city\").innerHTML = data.city || '';\n        preview.querySelector(\".country\").innerHTML = data.country || '';\n        preview.querySelector(\".pincode\").innerHTML = data.pincode || '';\n        preview.querySelector(\".phone\").innerHTML = data.phone || '';\n      }\n    })\n    .catch(err => {\n      console.error(\"Error fetching address:\", err);\n    });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  document.querySelectorAll('.billing-radio').forEach(input => {\n    input.addEventListener('change', () => {\n      if (input.checked) {\n          let deliverSameInput = document.querySelector('[name=\"deliver_same\"]');\n          \n          // Check if the checkbox is checked on page load\n          if (deliverSameInput && deliverSameInput.checked) {\n              updateAddressPreview(\"billing\", input.value);\n              updateAddressPreview(\"shipping\", input.value);\n          }\n        else{\n                updateAddressPreview(\"billing\", input.value);\n            }\n      }\n    });\n\n    // Trigger on first load if already selected\n    if (input.checked) {\n      updateAddressPreview(\"billing\", input.value);\n    }\n  });\n\n  document.querySelectorAll('.shipping-radio').forEach(input => {\n    input.addEventListener('change', () => {\n      if (input.checked) {\n        updateAddressPreview(\"shipping\", input.value);\n      }\n    });\n\n    if (input.checked) {\n      updateAddressPreview(\"shipping\", input.value);\n    }\n  });\n});\n\n\n\nfunction getSelectedAddress(addressType) {\n  let selectedAddress = document.querySelector(`input[name=\"${addressType}\"]:checked`);\n  return selectedAddress ? selectedAddress.value : null;\n}\n\n\n",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-06 07:18:19.448600",
  "name": "profile-tab",
  "public_url": "/files/page_styles/CSS-2429b-bdee886dea.css?v=8502ea495e",
  "script": "/* Write your CSS here */\n/* Write your CSS here */\n.tab {\n    display: none; \n}\n.tab.active { \n    display: block; \n}\n.tabs { \n    display: flex; \n    justify-content: space-around; \n    margin-bottom: 20px; \n}\n.tab-button { \n    cursor: pointer; \n    border: none; \n    border-radius: 10px;\n    padding: 5px;\n}\n\n.tab-button.active .__text_block__{\n    color: #2B3686;\n    font-weight: 700;\n}",
  "script_type": "CSS"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-20 09:11:58.158814",
  "name": "profile-js",
  "public_url": "/files/page_scripts/JavaScript-31761-d9b6540851.js?v=d4727cb294",
  "script": "window.addEventListener('load', () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const showTabValue = urlParams.get('showTab');\n\n  if (showTabValue && !isNaN(showTabValue)) {\n    showTab(parseInt(showTabValue));\n  }\n  const showPasswordCheckbox = document.getElementById(\"show_password\");\n  const oldPasswordInput = document.getElementById(\"old_password\");\n  const newPassword1Input = document.getElementById(\"new_password1\");\n  const newPassword2Input = document.getElementById(\"new_password2\");\n\n  if (showPasswordCheckbox && oldPasswordInput && newPassword1Input && newPassword2Input) {\n    showPasswordCheckbox.setAttribute('type', 'checkbox');\n\n    showPasswordCheckbox.addEventListener(\"change\", function () {\n      if (this.checked) {\n        oldPasswordInput.setAttribute('type', 'text');\n        newPassword1Input.setAttribute('type', 'text');\n        newPassword2Input.setAttribute('type', 'text');\n      } else {\n        oldPasswordInput.setAttribute('type', 'password');\n        newPassword1Input.setAttribute('type', 'password');\n        newPassword2Input.setAttribute('type', 'password');\n      }\n    });\n  }\n});\n\nfunction showTab(tabIndex) {\n    let tabs = document.querySelectorAll('.tab');\n    tabs.forEach(tab => tab.classList.remove('active'));\n    document.getElementById(`tab-${tabIndex}`).classList.add('active');\n    document.querySelectorAll('.tab-button').forEach((button, i) => {\n        button.classList.toggle('active', i === tabIndex);\n    });\n    \n    // Hide address_create_form if it's visible\n    const addressForm = document.getElementById('address_create_form');\n    if (addressForm && addressForm.style.display !== 'none') {\n        addressForm.style.display = 'none';\n    }\n    const tab0 = document.getElementById('tab-3');\n    if (tab0 && tab0.hasAttribute('style')) {\n        tab0.removeAttribute('style');\n    }\n}\n\nfunction submitForm() {\n    // event.preventDefault();\n    \n    // Collect form data\n    const form = document.getElementById('profileForm');\n    const formData = new FormData(form);\n    \n    // Build the JSON object from the form data\n    const formObject = {};\n    formData.forEach((value, key) => {\n      formObject[key] = value;\n    });\n    \n    // Create the data object to send with the request\n    const data = {\n      ...formObject,\n      name: formObject['email'],\n      doctype: \"User\",\n      web_form_name: \"edit-profile\"\n    };\n    \n\n    const payload = {\n      data: JSON.stringify(data), \n      web_form: \"edit-profile\",\n      for_payment: false,\n      cmd: \"frappe.website.doctype.web_form.web_form.accept\"\n    };\n    \n\n    const csrfToken = page_data.csrf_token;\n    \n \n    fetch('/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-frappe-cmd': 'frappe.website.doctype.web_form.web_form.accept',\n        'x-frappe-csrf-token': csrfToken,\n        'x-requested-with': 'XMLHttpRequest',\n        'Accept': 'application/json, text/javascript, */*; q=0.01',\n      },\n      body: JSON.stringify(payload)\n    })\n    .then(response => response.json())\n    .then(data => {\n      Toastify({\n          text: 'Profile updated successfully!',\n          close: true,\n          gravity: \"top\",\n          position: \"center\",\n          stopOnFocus: true,\n          style: {\n            background: \"linear-gradient(to right, #00b09b, #96c93d)\",\n          }\n        }).showToast();\n    \n        setTimeout(() => {\n          window.location.href = '/profile?showTab=1';  \n        }, 500);\n    })\n    .catch(error => {\n      console.error('Error:', error); \n    });\n}\n\nfunction changePassword() {\n        \n    // Collect form data\n    const form = document.getElementById('change_password');\n    const formData = new FormData(form);\n    \n    // Build the JSON object from the form data\n    const formObject = {};\n    formData.forEach((value, key) => {\n      formObject[key] = value;\n    });\n    \n    const data = {\n      ...formObject,\n      logout_all_sessions: 1\n    };\n    \n    const { new_password, confirm_password } = formObject;\n\n      // Check if new_password and confirm_password match\n      if (new_password !== confirm_password) {\n        alert(\"New password and confirm password do not match.\");\n        return;\n    } \n  \n    const csrfToken = page_data.csrf_token;\n    \n \n    fetch('/api/method/frappe.core.doctype.user.user.update_password', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-frappe-csrf-token': csrfToken,\n        'x-requested-with': 'XMLHttpRequest',\n        'Accept': 'application/json, text/javascript, */*; q=0.01',\n      },\n      body: JSON.stringify(data)\n    })\n    .then(response => response.json())\n    .then(data => {\n      Toastify({\n          text: 'Password changed successfully!',\n          close: true,\n          gravity: \"top\",\n          position: \"center\",\n          stopOnFocus: true,\n          style: {\n            background: \"linear-gradient(to right, #00b09b, #96c93d)\",\n          }\n        }).showToast();\n    \n        setTimeout(() => {\n          window.location.href = '/profile?showTab=2'; \n        }, 500);\n    })\n    .catch(error => {\n      console.error('Error:', error); \n    });\n}\n\n// document.querySelectorAll('.order_details_btn').forEach(button => {\n//   button.addEventListener('click', () => {\n//     const orderDetailsSection = button.closest('.order_section').querySelector('.order_details');\n    \n//     if (orderDetailsSection.style.display === 'none' || !orderDetailsSection.style.display) {\n//       orderDetailsSection.style.display = 'block';\n//     } else {\n//       orderDetailsSection.style.display = 'none';\n//     }\n//   });\n// });\nlet previousTabContent = null;\nlet originalParent = null;\n\ndocument.querySelectorAll('.order_details_btn').forEach(button => {\n  button.addEventListener('click', () => {\n    const tab0 = document.querySelector('#tab-0');\n    const orderSection = button.closest('.order_section');\n    const orderDetails = orderSection.querySelector('.order_details');\n\n    // Save current tab-0 content (excluding orderDetails)\n    previousTabContent = tab0.innerHTML;\n\n    // Save original parent of orderDetails\n    originalParent = orderSection;\n\n    // Hide everything in tab-0\n    tab0.innerHTML = '';\n\n    // Move orderDetails to tab-0 and show it\n    tab0.appendChild(orderDetails);\n    orderDetails.style.display = 'block';\n  });\n});\n\ndocument.addEventListener('click', (e) => {\n  if (e.target.classList.contains('order_back_btn')) {\n    const tab0 = document.querySelector('#tab-0');\n    const orderDetails = tab0.querySelector('.order_details');\n\n    // Hide orderDetails\n    orderDetails.style.display = 'none';\n\n    // Restore tab-0 content\n    tab0.innerHTML = previousTabContent;\n\n    // Re-inject the hidden orderDetails back to its original place\n    if (originalParent) {\n      originalParent.appendChild(orderDetails);\n    }\n\n    // Re-bind events since we replaced tab content\n    rebindButtons();\n  }\n});\n\n// Function to reattach events after DOM replacement\nfunction rebindButtons() {\n  document.querySelectorAll('.order_details_btn').forEach(button => {\n    button.addEventListener('click', () => {\n      const tab0 = document.querySelector('#tab-0');\n      const orderSection = button.closest('.order_section');\n      const orderDetails = orderSection.querySelector('.order_details');\n\n      previousTabContent = tab0.innerHTML;\n      originalParent = orderSection;\n\n      tab0.innerHTML = '';\n      tab0.appendChild(orderDetails);\n      orderDetails.style.display = 'block';\n    });\n  });\n}\n\n\ndocument.getElementById(\"logout\").addEventListener(\"click\", async function () {\n  try {\n    const response = await fetch(\"/?cmd=logout\", {\n      method: \"GET\",\n      credentials: \"same-origin\"\n    });\n\n    if (response.ok) {\n      window.location.href = \"/\";\n    } else {\n      const data = await response.json();\n      throw new Error(data.message || \"Logout failed\");\n    }\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    Toastify({\n      text: error.message || \"Something went wrong during logout.\",\n      close: true,\n      gravity: \"top\",\n      position: \"center\",\n      style: {\n        background: \"linear-gradient(to right, #ff416c, #ff4b2b)\",\n      },\n    }).showToast();\n  }\n});\n\n",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-20 07:14:33.497207",
  "name": "forgot-password",
  "public_url": "/files/page_scripts/JavaScript-1cd28-faac43bdf3.js?v=3930981f06",
  "script": "// Write your script here\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const form = document.getElementById(\"reset_password\");\n\n  if (form) {\n    form.addEventListener(\"submit\", function (e) {\n      e.preventDefault();\n\n      const email = form.querySelector('input[name=\"user\"]').value;\n      const csrfToken = page_data.csrf_token;\n\n      const payload = {\n        user: email\n      };\n\n      fetch(\"/api/method/frappe.core.doctype.user.user.reset_password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'x-frappe-csrf-token': csrfToken,\n        },\n        body: JSON.stringify(payload)\n      })\n      .then(response => response.json())\n        .then(data => {\n            console.log(data)\n          if (data._server_messages) {\n             const messages = JSON.parse(data._server_messages);\n  const firstMessage = JSON.parse(messages[0]); // Parse again here\n\n  const errorMsg = firstMessage.message || \"Something went wrong.\";\n        \n            Toastify({\n              text: `❌ ${errorMsg}`,\n              close: true,\n              gravity: \"top\",\n              position: \"center\",\n              stopOnFocus: true,\n              style: {\n                background: \"linear-gradient(to right, #ff416c, #ff4b2b)\", // red tone\n              }\n            }).showToast();\n          } else {\n            Toastify({\n              text: \"✅ Reset link sent successfully!\",\n              close: true,\n              gravity: \"top\",\n              position: \"center\",\n              stopOnFocus: true,\n              style: {\n                background: \"linear-gradient(to right, #00b09b, #96c93d)\",\n              }\n            }).showToast();\n          }\n        })\n        .catch(error => {\n          console.error(\"Error:\", error);\n          Toastify({\n            text: \"⚠️ Network error. Please try again.\",\n            close: true,\n            gravity: \"top\",\n            position: \"center\",\n            stopOnFocus: true,\n            style: {\n              background: \"linear-gradient(to right, #ff416c, #ff4b2b)\",\n            }\n          }).showToast();\n        });\n    });\n  }\n});\nwindow.onload = function () {\n  if (page_data.user && page_data.user !== \"Guest\") {\n    const urlParams = new URLSearchParams(window.location.search);\n    const redirectTo = urlParams.get('redirect-to');\n\n    window.location.href = redirectTo || '/profile';\n  }\n};\n",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-30 10:31:30.530735",
  "name": "contact",
  "public_url": "/files/page_scripts/JavaScript-754dd-77578bf5bc.js?v=569dda677e",
  "script": "// Write your script here\ndocument.getElementById(\"contact-form\").addEventListener(\"submit\", async function(e) {\n  e.preventDefault();\n\n  const csrfToken = page_data.csrf_token;\n\n  const name = document.querySelector('[name=\"name\"]').value;\n  const mobile = document.querySelector('[name=\"mobile\"]').value;\n  const subject = document.querySelector('[name=\"subject\"]').value;\n  const sender = document.querySelector('[name=\"first_name\"]').value;\n  const message = document.querySelector('[name=\"message\"]').value;\n    \nconst email_body = `Name: ${name}\nEmail: ${sender}\nMobile: ${mobile}\n\nMessage:\n${message}`;\n\n  const payload = {\n    cmd: \"frappe.www.contact.send_message\",\n    subject: subject,\n    sender: sender,\n    message: email_body\n  };\n\n  try {\n    const response = await fetch('/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Frappe-CSRF-Token': csrfToken\n      },\n      body: JSON.stringify(payload)\n    });\n\n    const result = await response.json();\n\n    if (response.status === 200) {\n      Toastify({\n        text: \"📩 Message sent successfully!\",\n        close: true,\n        gravity: \"top\",\n        position: \"center\",\n        stopOnFocus: true,\n        style: {\n          background: \"linear-gradient(to right, #00b09b, #96c93d)\",\n        }\n      }).showToast();\n      e.target.reset();\n    } else {\n      Toastify({\n        text: `❌ Failed to send message: ${result.message || 'Unknown error'}`,\n        close: true,\n        gravity: \"top\",\n        position: \"center\",\n        stopOnFocus: true,\n        style: {\n          background: \"linear-gradient(to right, #ff5f6d, #ffc371)\",\n        }\n      }).showToast();\n    }\n  } catch (error) {\n    console.error(\"Contact form error:\", error);\n    Toastify({\n      text: \"⚠️ An error occurred. Please try again later.\",\n      close: true,\n      gravity: \"top\",\n      position: \"center\",\n      stopOnFocus: true,\n      style: {\n        background: \"linear-gradient(to right, #f857a6, #ff5858)\",\n      }\n    }).showToast();\n  }\n});\n",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-04-20 11:48:25.997824",
  "name": "shop",
  "public_url": "/files/page_scripts/JavaScript-2332b-4846627fd0.js?v=6a75f7bfa6",
  "script": "document.addEventListener('DOMContentLoaded', function () {\n  const originalDrawer = document.getElementById('category_drawer');\n  const drawerBtn = document.getElementById('category_drawer_btn');\n\n  // Create and append overlay\n  const overlay = document.createElement('div');\n  overlay.id = 'drawer_overlay';\n  document.body.appendChild(overlay);\n\n  // Clone the drawer\n  const drawer = originalDrawer.cloneNode(true);\n  drawer.id = 'category_drawer_clone';\n  drawer.style.display = 'block'; // ensure it's not display: none\n  document.body.appendChild(drawer);\n\n  // Style the cloned drawer\n  Object.assign(drawer.style, {\n    position: 'fixed',\n    top: '0',\n    left: '-300px', // initially hidden off-screen\n    width: '300px',\n    height: '100%',\n    background: '#fff',\n    boxShadow: '2px 0 10px rgba(0,0,0,0.1)',\n    transition: 'left 0.3s ease',\n    zIndex: '9999',\n    overflowY: 'auto',\n    display: 'block' // important to override inherited display: none\n  });\n\n  // Style overlay\n  Object.assign(overlay.style, {\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    right: '0',\n    bottom: '0',\n    background: 'rgba(0,0,0,0.4)',\n    zIndex: '9998',\n    display: 'none'\n  });\n\n  // Show drawer\n  drawerBtn.addEventListener('click', () => {\n    drawer.style.left = '0';\n    overlay.style.display = 'block';\n  });\n\n  // Hide drawer\n  overlay.addEventListener('click', () => {\n    drawer.style.left = '-300px';\n    overlay.style.display = 'none';\n  });\n    const sortSelect = document.getElementById(\"sorting\");\n\n    // Get `sort_by` from URL\n    const urlParams = new URLSearchParams(window.location.search);\n    const sortBy = urlParams.get(\"sort_by\");\n\n    if (sortBy) {\n      // Set the selected option\n      [...sortSelect.options].forEach(option => {\n        if (option.value === sortBy) {\n          option.selected = true;\n        }\n      });\n    }\n\n    sortSelect.addEventListener(\"change\", function () {\n      const selectedSort = this.value;\n      const url = new URL(window.location.href);\n      url.searchParams.set(\"sort_by\", selectedSort);\n      url.searchParams.set(\"page\", 1); // reset to page 1 on change\n      window.location.href = url.toString();\n    });\n});\n\n",
  "script_type": "JavaScript"
 },
 {
  "docstatus": 0,
  "doctype": "Builder Client Script",
  "modified": "2025-02-27 11:05:18.373683",
  "name": "style.css",
  "public_url": "/files/page_styles/CSS-7b272-dae3679343.css?v=ac33aaf252",
  "script": "/* Write your CSS here */\n.truncate {\n  white-space: nowrap; \n  overflow: hidden; \n  text-overflow: ellipsis;\n}",
  "script_type": "CSS"
 }
]
